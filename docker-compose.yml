version: '3.3'

services:
  database:
    container_name: kupipodariday-db
    image: postgres:13-alpine
    build:
      context: ./database
    restart: unless-stopped
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: kupipodariday-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    ports:
      - "4000:3000"
    depends_on:
      - database
    networks:
      - backend-network
      - frontend-network
    environment:
      NODE_ENV: production
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: "5432"

  frontend:
    container_name: kupipodariday-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8081:80"
    depends_on:
      - backend
    networks:
      - frontend-network

networks:
  backend-network:
    internal: true
  frontend-network:

volumes:
  postgres_data: